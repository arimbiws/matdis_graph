#include <stdio.h>
#define V 4
#define INF 99999

// Deklarasi fungsi cetakRute
void cetakRute(int path[][V], int src, int dest) {
    if (path[src][dest] == src) {
        printf(" -> %d", dest);
        return;
    }
    cetakRute(path, src, path[src][dest]);
    printf(" -> %d", dest);
}

void cetakHasil(int jarak[][V], int path[][V]) {
    printf("Matriks berikut menunjukkan jarak terpendek antara setiap pasangan simpul:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (jarak[i][j] == INF)
                printf("%7s", "INF");
            else
                printf("%7d", jarak[i][j]);
        }
        printf("\n");
    }

    printf("\nRute terpendek antara setiap pasangan simpul:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i != j && jarak[i][j] != INF) {
                printf("Rute dari %d ke %d: %d ", i+1, j+1, i+1);
                cetakRute(path, i, j);
                printf(" -> %d\n", j);
            }
        }
    }
}

void floydWarshall(int graph[][V]) {
    int jarak[V][V], path[V][V], i, j, k;

    // Inisialisasi jarak dan path
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            jarak[i][j] = graph[i][j];
            if (i == j || graph[i][j] == INF) {
                path[i][j] = -1;
            } else {
                path[i][j] = i;
            }
        }
    }

    // Algoritma Floyd-Warshall
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (jarak[i][k] + jarak[k][j] < jarak[i][j]) {
                    jarak[i][j] = jarak[i][k] + jarak[k][j];
                    path[i][j] = path[k][j];
                }
            }
        }
    }

    cetakHasil(jarak, path);
}

int main() {
    int graph[V][V] = {
        {0, INF, -2, INF},
        {4, 0, 3, INF},
        {INF, INF, 0, 2},
        {INF, -1, INF, 0}
    };

    floydWarshall(graph);
    return 0;
}
