#include <stdio.h>
#define V 5
#define INF 99999

void cetakRute(int jalur[][V], int asal, int tujuan) {
    if (jalur[asal][tujuan] == asal) {
        printf(" -> %c", tujuan + 'A');
        return;
    }
    cetakRute(jalur, asal, jalur[asal][tujuan]);
    printf(" -> %c", tujuan + 'A');
}

void cetakHasil(int jarak[][V], int jalur[][V], int asal) {
    printf("\nSimpul\tJarak dari Sumber\n");
    for (int i = 0; i < V; i++) {
        printf("%c\t\t", i + 'A');
        if (jarak[asal][i] == INF)
            printf("INF\n");
        else
            printf("%d\n", jarak[asal][i]);
    }

    printf("\nRute terpendek dari %c ke simpul lainnya:\n", asal + 'A');
    for (int i = 0; i < V; i++) {
        if (i != asal && jarak[asal][i] != INF) {
            printf("Jalur dari %c ke %c: %c", asal + 'A', i + 'A', asal + 'A');
            cetakRute(jalur, asal, i);
            printf("\n");
        }
    }
}

void floydWarshall(int graph[][V], int asal) {
    int jarak[V][V], jalur[V][V], i, j, k;

    for (i = 0; i < V; i++) {
    for (j = 0; j < V; j++) {
            jarak[i][j] = graph[i][j];
            if (i == j || graph[i][j] == INF) {
                jalur[i][j] = -1;
            } else {
                jalur[i][j] = i;
            }
        }
    }

    for (k = 0; k < V; k++) {
    for (i = 0; i < V; i++) {
    for (j = 0; j < V; j++) {
        if (jarak[i][k] + jarak[k][j] < jarak[i][j]) {
                jarak[i][j] = jarak[i][k] + jarak[k][j];
            jalur[i][j] = jalur[k][j];
            }
        }
    }
    }

    cetakHasil(jarak, jalur, asal);
}

int main() {
    int graph[V][V] = {
        {0, 3, 8, INF, -4},
        {INF, 0, INF, 1, 7},
        {INF, 4, 0, INF, INF},
        {2, INF, -5, 0, INF},
        {INF, INF, INF, 6, 0}
    };

    for (int i = 0; i < V; i++) {
    floydWarshall(graph, i);
    }

    return 0;
}
