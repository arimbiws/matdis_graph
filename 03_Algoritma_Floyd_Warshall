#include <stdio.h>
#define V 4
#define INF 99999

void cetakRute(int path[][V], int src, int dest) {
    if (path[src][dest] == src) {
        printf(" -> %c", dest + 'A');
        return;
    }
    cetakRute(path, src, path[src][dest]);
    printf(" -> %c", dest + 'A');
}

void cetakHasil(int jarak[][V], int path[][V], int src) {
    printf("\nSimpul\tJarak dari Sumber\n");
    for (int i = 0; i < V; i++) {
        printf("%c\t\t", i + 'A');
        if (jarak[src][i] == INF)
            printf("INF\n");
        else
            printf("%d\n", jarak[src][i]);
    }

    printf("\nRute terpendek dari %c ke simpul lainnya:\n", src + 'A');
    for (int i = 0; i < V; i++) {
        if (i != src && jarak[src][i] != INF) {
            printf("Jalur dari %c ke %c: %c", src + 'A', i + 'A', src + 'A');
            cetakRute(path, src, i);
            printf("\n");
        }
    }
}

void floydWarshall(int graph[][V], int src) {
    int jarak[V][V], path[V][V], i, j, k;

    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            jarak[i][j] = graph[i][j];
            if (i == j || graph[i][j] == INF) {
                path[i][j] = -1;
            } else {
                path[i][j] = i;
            }
        }
    }

    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (jarak[i][k] + jarak[k][j] < jarak[i][j]) {
                    jarak[i][j] = jarak[i][k] + jarak[k][j];
                    path[i][j] = path[k][j];
                }
            }
        }
    }

    cetakHasil(jarak, path, src);
}

int main() {
    int graph[V][V] = {
        {0, 5, 9, INF},
        {5, 0, 3, 1},
        {9, 3, 0, 1},
        {INF, 1, 1, 0}
    };

    for (int i = 0; i < V; i++) {
        floydWarshall(graph, i);
    }

    return 0;
}
